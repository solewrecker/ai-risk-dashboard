/**
 * Mock Report System Class
 * 
 * @class ReportSystem
 * @description A mock implementation of the new report system for testing integration
 */

export class ReportSystem {
  constructor() {
    this.reportTypes = new Map();
    this.currentTheme = 'default';
    
    // Initialize with default report types
    this.initializeReportTypes();
  }
  
  /**
   * Initializes default report types
   * @private
   */
  initializeReportTypes() {
    this.reportTypes.set('executive', {
      id: 'executive',
      name: 'Executive Summary',
      description: 'A high-level overview for executives and stakeholders',
      template: 'executive-template',
      sections: ['summary', 'risks', 'recommendations']
    });
    
    this.reportTypes.set('technical', {
      id: 'technical',
      name: 'Technical Report',
      description: 'Detailed technical analysis with comprehensive data',
      template: 'technical-template',
      sections: ['overview', 'methodology', 'findings', 'technical-details', 'mitigations']
    });
  }
  
  /**
   * Checks if a report type exists
   * @param {string} reportTypeId - The report type ID to check
   * @returns {boolean} - Whether the report type exists
   */
  hasReportType(reportTypeId) {
    return this.reportTypes.has(reportTypeId);
  }
  
  /**
   * Registers a legacy report type with the new system
   * @param {string} id - The report type ID
   * @param {string} name - The report type name
   * @param {Object} config - Configuration for the report type
   */
  registerLegacyReportType(id, name, config) {
    if (!this.reportTypes.has(id)) {
      this.reportTypes.set(id, {
        id,
        name,
        description: `Migrated from legacy system: ${name}`,
        template: 'legacy-template',
        sections: config.sections || ['default-section'],
        isLegacy: true
      });
      
      console.log(`Registered legacy report type: ${name}`);
    }
  }
  
  /**
   * Sets the current theme
   * @param {string} themeId - The theme ID to set
   */
  setTheme(themeId) {
    this.currentTheme = themeId;
    console.log(`New system theme set to: ${themeId}`);
    
    // Dispatch theme changed event
    const event = new CustomEvent('themeChanged', {
      detail: { themeId }
    });
    document.dispatchEvent(event);
  }
  
  /**
   * Generates a report
   * @param {string} reportType - The type of report to generate
   * @param {Object} data - The data for the report
   * @param {Object} options - Options for report generation
   * @returns {Promise<Object>} - The generated report
   */
  async generateReport(reportType, data, options = {}) {
    console.log(`New system generating ${reportType} report`);
    
    // Check if report type exists
    if (!this.reportTypes.has(reportType)) {
      throw new Error(`Unknown report type: ${reportType}`);
    }
    
    // Apply theme if specified in options
    if (options.theme) {
      this.setTheme(options.theme);
    }
    
    // Get report type configuration
    const reportConfig = this.reportTypes.get(reportType);
    
    // Simulate processing time (longer for technical reports)
    const processingTime = reportType === 'technical' ? 1200 : 600;
    await new Promise(resolve => setTimeout(resolve, processingTime));
    
    // Simulate random error for testing fallback (1% chance)
    if (Math.random() < 0.01) {
      throw new Error(`Random error in new system while generating ${reportType} report`);
    }
    
    // Generate mock report content
    return {
      title: data.title || `${reportConfig.name}`,
      content: `This is a mock ${reportType} report generated by the new system.`,
      theme: this.currentTheme,
      timestamp: new Date().toISOString(),
      sections: reportConfig.sections,
      metadata: {
        generatedBy: 'new-system',
        version: '1.0.0',
        reportTypeId: reportType
      }
    };
  }
  
  /**
   * Gets all available report types
   * @returns {Array} - Array of report type objects
   */
  getAvailableReportTypes() {
    return Array.from(this.reportTypes.values());
  }
}